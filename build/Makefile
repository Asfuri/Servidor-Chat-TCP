# Makefile para Servidor de Chat TCP - Etapa 2 (com pasta de logs)
# Projeto: Programa√ß√£o Concorrente C++
# Data: 03/10/2025

# ==============================================================================
# CONFIGURA√á√ïES DO COMPILADOR
# ==============================================================================
CXX = g++
CXXFLAGS = -std=c++17 -Wall -Wextra -O2 -pthread

# ==============================================================================
# ESTRUTURA DE DIRET√ìRIOS
# ==============================================================================
SRC_DIR = ../src
LIB_DIR = ../lib
OBJ_DIR = obj
LOG_DIR = logs
BUILD_DIR = .

# ==============================================================================
# ARQUIVOS E ALVOS
# ==============================================================================
HEADERS = $(LIB_DIR)/libtslog.h $(LIB_DIR)/logEntry.h

# Execut√°veis
TEST_LIBTSLOG = test_libtslog
TCP_SERVER = tcp_server
TCP_CLIENT = tcp_client

# Arquivos objeto
LIBTSLOG_OBJ = $(OBJ_DIR)/libtslog.o
TEST_LIBTSLOG_OBJ = $(OBJ_DIR)/test_libtslog.o
TCP_SERVER_OBJ = $(OBJ_DIR)/tcp_server.o
TCP_CLIENT_OBJ = $(OBJ_DIR)/tcp_client.o

# Arquivos de log na pasta logs/
TEST_LOG = $(LOG_DIR)/chat_server.log
SERVER_LOG = $(LOG_DIR)/server.log
CLIENT_LOG = $(LOG_DIR)/client.log

# ==============================================================================
# ALVOS PRINCIPAIS
# ==============================================================================
.PHONY: all clean clean-obj clean-logs run-test run-server run-client test-tcp help setup

# Compila todos os execut√°veis e cria estrutura
all: setup $(TEST_LIBTSLOG) $(TCP_SERVER) $(TCP_CLIENT)
	@echo "‚úÖ Compila√ß√£o completa!"
	@echo "üì¶ Execut√°veis dispon√≠veis:"
	@echo "   ./$(TEST_LIBTSLOG)  - Teste da biblioteca libtslog"
	@echo "   ./$(TCP_SERVER)     - Servidor TCP de Chat"
	@echo "   ./$(TCP_CLIENT)     - Cliente CLI de Chat"
	@echo "üìÅ Logs ser√£o salvos em: $(LOG_DIR)/"

# Cria diret√≥rios necess√°rios
setup:
	@mkdir -p $(OBJ_DIR)
	@mkdir -p $(LOG_DIR)
	@echo "üìÅ Diret√≥rios criados: $(OBJ_DIR)/, $(LOG_DIR)/"

# ==============================================================================
# COMPILA√á√ÉO DOS EXECUT√ÅVEIS
# ==============================================================================

# Teste da biblioteca libtslog (antigo main_server.cpp)
$(TEST_LIBTSLOG): $(LIBTSLOG_OBJ) $(TEST_LIBTSLOG_OBJ)
	@echo "üîó Linkando teste da libtslog: $@"
	$(CXX) $(CXXFLAGS) $^ -o $@

# Servidor TCP de Chat
$(TCP_SERVER): $(LIBTSLOG_OBJ) $(TCP_SERVER_OBJ)
	@echo "üîó Linkando servidor TCP: $@"
	$(CXX) $(CXXFLAGS) $^ -o $@

# Cliente CLI de Chat
$(TCP_CLIENT): $(TCP_CLIENT_OBJ)
	@echo "üîó Linkando cliente TCP: $@"
	$(CXX) $(CXXFLAGS) $^ -o $@

# ==============================================================================
# COMPILA√á√ÉO DE OBJETOS
# ==============================================================================

# Biblioteca libtslog
$(LIBTSLOG_OBJ): $(SRC_DIR)/libtslog.cpp $(HEADERS) | setup
	@echo "üî® Compilando libtslog: $<"
	$(CXX) $(CXXFLAGS) -I$(LIB_DIR) -c $< -o $@

# Teste da libtslog (renomeado do main_server.cpp)
$(TEST_LIBTSLOG_OBJ): $(SRC_DIR)/test_libtslog.cpp $(HEADERS) | setup
	@echo "üî® Compilando teste libtslog: $<"
	$(CXX) $(CXXFLAGS) -I$(LIB_DIR) -c $< -o $@

# Servidor TCP
$(TCP_SERVER_OBJ): $(SRC_DIR)/tcp_server.cpp $(HEADERS) | setup
	@echo "üî® Compilando servidor TCP: $<"
	$(CXX) $(CXXFLAGS) -I$(LIB_DIR) -c $< -o $@

# Cliente TCP
$(TCP_CLIENT_OBJ): $(SRC_DIR)/tcp_client.cpp | setup
	@echo "üî® Compilando cliente TCP: $<"
	$(CXX) $(CXXFLAGS) -I$(LIB_DIR) -c $< -o $@

# ==============================================================================
# EXECU√á√ÉO COM LOGS ORGANIZADOS
# ==============================================================================

# Executa teste da libtslog
run-test: $(TEST_LIBTSLOG) setup
	@echo "üß™ Executando teste da libtslog..."
	@echo "üìù Logs ser√£o salvos em: $(TEST_LOG)"
	@echo "----------------------------------------"
	./$(TEST_LIBTSLOG)
	@echo "----------------------------------------"
	@if [ -f $(TEST_LOG) ]; then \
		echo "üìä Linhas no log: $$(wc -l < $(TEST_LOG))"; \
		echo "üîç Primeiras 5 linhas:"; \
		head -5 $(TEST_LOG); \
		echo "üìÑ Log completo dispon√≠vel em: $(TEST_LOG)"; \
	else \
		echo "‚ö†Ô∏è  Arquivo de log n√£o encontrado em $(TEST_LOG)"; \
	fi

# Executa servidor TCP
run-server: $(TCP_SERVER) setup
	@echo "üöÄ Iniciando servidor TCP na porta 8080..."
	@echo "üìù Logs do servidor em: $(SERVER_LOG)"
	@echo "üí° Para parar: Ctrl+C"
	@echo "üí° Para conectar: use './$(TCP_CLIENT)' em outro terminal"
	@echo "========================================="
	./$(TCP_SERVER)

# Executa cliente TCP
run-client: $(TCP_CLIENT) setup
	@echo "üì± Iniciando cliente TCP..."
	@echo "üìù Logs do cliente em: $(CLIENT_LOG)"
	@echo "üí° Conectando ao servidor localhost:8080"
	@echo "üí° Digite mensagens ou 'sair' para encerrar"
	@echo "========================================="
	./$(TCP_CLIENT)

# Executa cliente com IP/porta customizados
run-client-custom: $(TCP_CLIENT) setup
	@echo "üì± Uso: make run-client-custom SERVER_IP=127.0.0.1 SERVER_PORT=8080"
	@if [ -z "$(SERVER_IP)" ]; then \
		echo "‚ùå Defina SERVER_IP (ex: SERVER_IP=192.168.1.100)"; \
		exit 1; \
	fi
	@if [ -z "$(SERVER_PORT)" ]; then \
		echo "‚ùå Defina SERVER_PORT (ex: SERVER_PORT=8080)"; \
		exit 1; \
	fi
	@echo "üîó Conectando a $(SERVER_IP):$(SERVER_PORT)"
	@echo "üìù Logs em: $(CLIENT_LOG)"
	./$(TCP_CLIENT) $(SERVER_IP) $(SERVER_PORT)

# ==============================================================================
# TESTES AUTOMATIZADOS COM LOGS ORGANIZADOS
# ==============================================================================

# Teste completo do sistema TCP
test-tcp: $(TCP_SERVER) $(TCP_CLIENT) setup
	@echo "‚ö° Iniciando teste automatizado TCP"
	@echo "üìÅ Logs em: $(LOG_DIR)/"
	@echo "üì° Iniciando servidor em background..."
	@./$(TCP_SERVER) & echo $$! > $(LOG_DIR)/server.pid
	@sleep 2
	@echo "üë• Testando m√∫ltiplos clientes..."
	@for i in 1 2 3; do \
		echo "ü§ñ Cliente $$i: enviando mensagem de teste"; \
		(echo "Mensagem automatica do cliente $$i"; sleep 1; echo "sair") | ./$(TCP_CLIENT) localhost 8080 > $(LOG_DIR)/client_$$i.log 2>&1 & \
	done
	@sleep 5
	@echo "üõë Parando servidor..."
	@if [ -f $(LOG_DIR)/server.pid ]; then \
		kill `cat $(LOG_DIR)/server.pid` 2>/dev/null || true; \
		rm -f $(LOG_DIR)/server.pid; \
	fi
	@echo "üìä Verificando logs do servidor..."
	@if [ -f $(SERVER_LOG) ]; then \
		echo "‚úÖ Logs do servidor ($(SERVER_LOG)):"; \
		echo "   Linhas: $$(wc -l < $(SERVER_LOG))"; \
		echo "   Conex√µes: $$(grep -c 'conectado' $(SERVER_LOG) 2>/dev/null || echo 0)"; \
		echo "   Mensagens: $$(grep -c 'Recebido' $(SERVER_LOG) 2>/dev/null || echo 0)"; \
	else \
		echo "‚ùå Arquivo $(SERVER_LOG) n√£o encontrado"; \
	fi
	@echo "üìÅ Todos os logs em: $(LOG_DIR)/"
	@ls -la $(LOG_DIR)/
	@echo "‚úÖ Teste TCP conclu√≠do"

# Teste de stress com logs organizados
stress-test: $(TCP_SERVER) $(TCP_CLIENT) setup
	@echo "‚ö° TESTE DE STRESS - 10 clientes simult√¢neos"
	@echo "üìÅ Logs em: $(LOG_DIR)/stress/"
	@mkdir -p $(LOG_DIR)/stress
	@./$(TCP_SERVER) > $(LOG_DIR)/stress/server.log 2>&1 & echo $$! > $(LOG_DIR)/stress/server.pid
	@sleep 2
	@for i in $$(seq 1 10); do \
		echo "üöÄ Cliente $$i conectando..."; \
		(echo "Cliente $$i - Mensagem 1"; sleep 0.5; echo "Cliente $$i - Mensagem 2"; sleep 0.5; echo "sair") | ./$(TCP_CLIENT) > $(LOG_DIR)/stress/client_$$i.log 2>&1 & \
	done
	@sleep 8
	@if [ -f $(LOG_DIR)/stress/server.pid ]; then \
		kill `cat $(LOG_DIR)/stress/server.pid` 2>/dev/null || true; \
		rm -f $(LOG_DIR)/stress/server.pid; \
	fi
	@echo "üìä Resultado do stress test:"
	@if [ -f $(LOG_DIR)/stress/server.log ]; then \
		echo "   Conex√µes aceitas: $$(grep -c 'conectado' $(LOG_DIR)/stress/server.log 2>/dev/null || echo 0)"; \
		echo "   Mensagens processadas: $$(grep -c 'Recebido' $(LOG_DIR)/stress/server.log 2>/dev/null || echo 0)"; \
		echo "   Desconex√µes: $$(grep -c 'desconectado' $(LOG_DIR)/stress/server.log 2>/dev/null || echo 0)"; \
	fi
	@echo "üìÅ Logs detalhados em: $(LOG_DIR)/stress/"
	@ls -la $(LOG_DIR)/stress/

# ==============================================================================
# AN√ÅLISE DE LOGS
# ==============================================================================

# Mostra resumo de todos os logs
logs-summary: setup
	@echo "üìä RESUMO DOS LOGS"
	@echo "=================="
	@if [ -d $(LOG_DIR) ]; then \
		echo "üìÅ Diret√≥rio de logs: $(LOG_DIR)/"; \
		echo "üìÑ Arquivos encontrados:"; \
		ls -lah $(LOG_DIR)/ 2>/dev/null || echo "   (vazio)"; \
		echo ""; \
		for log in $(LOG_DIR)/*.log; do \
			if [ -f "$$log" ]; then \
				echo "üìÑ $$(basename $$log):"; \
				echo "   Linhas: $$(wc -l < $$log)"; \
				echo "   Tamanho: $$(du -h $$log | cut -f1)"; \
				echo "   √öltima modifica√ß√£o: $$(stat -c %y $$log 2>/dev/null || stat -f %Sm $$log 2>/dev/null || echo 'N/A')"; \
				echo ""; \
			fi; \
		done; \
	else \
		echo "‚ùå Diret√≥rio $(LOG_DIR) n√£o encontrado"; \
	fi

# Visualiza logs em tempo real
logs-tail:
	@echo "üëÄ Monitorando logs em tempo real..."
	@echo "üí° Pressione Ctrl+C para parar"
	@if [ -f $(SERVER_LOG) ]; then \
		echo "üì° Monitorando: $(SERVER_LOG)"; \
		tail -f $(SERVER_LOG); \
	else \
		echo "‚ö†Ô∏è  Arquivo $(SERVER_LOG) n√£o encontrado"; \
		echo "üöÄ Inicie o servidor primeiro: make run-server"; \
	fi

# Limpa apenas logs antigos (mant√©m estrutura)
clean-logs:
	@echo "üßπ Limpando logs antigos..."
	@if [ -d $(LOG_DIR) ]; then \
		rm -f $(LOG_DIR)/*.log $(LOG_DIR)/*.pid; \
		rm -rf $(LOG_DIR)/stress; \
		echo "‚úÖ Logs limpos (diret√≥rio mantido)"; \
	else \
		echo "üìÅ Diret√≥rio $(LOG_DIR) n√£o existe"; \
	fi

# ==============================================================================
# LIMPEZA
# ==============================================================================

# Limpeza completa (mant√©m pasta logs vazia)
clean: clean-obj
	@echo "üßπ Limpando execut√°veis..."
	rm -f $(TEST_LIBTSLOG) $(TCP_SERVER) $(TCP_CLIENT)
	@$(MAKE) clean-logs
	@echo "‚úÖ Limpeza completa ($(LOG_DIR)/ mantido vazio)"

# Limpeza apenas de objetos
clean-obj:
	@echo "üßπ Limpando objetos..."
	rm -rf $(OBJ_DIR)

# Limpeza total (remove at√© pasta logs)
clean-all: clean
	@echo "üßπ Removendo pasta de logs..."
	rm -rf $(LOG_DIR)
	@echo "‚úÖ Limpeza total conclu√≠da"

# ==============================================================================
# DESENVOLVIMENTO E DEBUG
# ==============================================================================

# Compila vers√£o debug
debug: CXXFLAGS += -g -DDEBUG -O0
debug: clean all
	@echo "üêõ Vers√£o debug compilada"
	@echo "üîç Use: gdb ./$(TCP_SERVER) ou gdb ./$(TCP_CLIENT)"

# Verifica arquivos e estrutura necess√°rios
check: setup
	@echo "üîç Verificando estrutura do projeto..."
	@echo "üìÅ Diret√≥rios:"
	@for dir in $(SRC_DIR) $(LIB_DIR) $(OBJ_DIR) $(LOG_DIR); do \
		if [ -d $$dir ]; then echo "‚úÖ $$dir/"; else echo "‚ùå $$dir/ (faltando)"; fi; \
	done
	@echo "üìÑ Headers:"
	@for file in $(HEADERS); do \
		if [ -f $$file ]; then echo "‚úÖ $$file"; else echo "‚ùå $$file (faltando)"; fi; \
	done
	@echo "üìÑ Arquivos fonte esperados:"
	@for file in libtslog.cpp test_libtslog.cpp tcp_server.cpp tcp_client.cpp; do \
		if [ -f $(SRC_DIR)/$$file ]; then echo "‚úÖ $(SRC_DIR)/$$file"; else echo "‚ö†Ô∏è  $(SRC_DIR)/$$file (criar)"; fi; \
	done

# ==============================================================================
# INFORMA√á√ïES E AJUDA
# ==============================================================================

# Exibe informa√ß√µes do projeto
info: setup
	@echo "üìã INFORMA√á√ïES DO PROJETO - ETAPA 2"
	@echo "===================================="
	@echo "Estrutura de diret√≥rios:"
	@echo "  $(SRC_DIR)/     - C√≥digo fonte"
	@echo "  $(LIB_DIR)/     - Headers (.h)"
	@echo "  $(OBJ_DIR)/     - Objetos compilados"
	@echo "  $(LOG_DIR)/     - Arquivos de log"
	@echo ""
	@echo "Execut√°veis:"
	@echo "  $(TEST_LIBTSLOG) - Teste libtslog ‚Üí $(TEST_LOG)"
	@echo "  $(TCP_SERVER)    - Servidor TCP ‚Üí $(SERVER_LOG)"
	@echo "  $(TCP_CLIENT)    - Cliente CLI ‚Üí $(CLIENT_LOG)"
	@echo ""
	@echo "Compilador: $(CXX) $(CXXFLAGS)"

# Ajuda completa
help:
	@echo "üöÄ MAKEFILE - SERVIDOR DE CHAT TCP (ETAPA 2)"
	@echo "============================================="
	@echo ""
	@echo "üì¶ COMPILA√á√ÉO:"
	@echo "  all              - Compila todos os execut√°veis"
	@echo "  setup            - Cria diret√≥rios necess√°rios"
	@echo ""
	@echo "‚ñ∂Ô∏è  EXECU√á√ÉO:"
	@echo "  run-test         - Executa teste da libtslog"
	@echo "  run-server       - Inicia servidor TCP (porta 8080)"
	@echo "  run-client       - Inicia cliente TCP"
	@echo ""
	@echo "üß™ TESTES:"
	@echo "  test-tcp         - Teste automatizado completo"
	@echo "  stress-test      - Teste de stress (10 clientes)"
	@echo ""
	@echo "üìä LOGS:"
	@echo "  logs-summary     - Resumo de todos os logs"
	@echo "  logs-tail        - Monitora logs em tempo real"
	@echo "  clean-logs       - Remove apenas logs"
	@echo ""
	@echo "üßπ LIMPEZA:"
	@echo "  clean            - Remove execut√°veis e logs"
	@echo "  clean-obj        - Remove apenas objetos"
	@echo "  clean-all        - Limpeza total (remove pasta logs)"
	@echo ""
	@echo "üìÅ TODOS OS LOGS FICAM EM: $(LOG_DIR)/"
	@echo "   $(TEST_LOG)    - Teste da biblioteca"
	@echo "   $(SERVER_LOG)  - Servidor TCP"
	@echo "   $(CLIENT_LOG)  - Cliente TCP"

# ==============================================================================
# REGRAS ESPECIAIS
# ==============================================================================
.PHONY: all setup clean clean-obj clean-logs clean-all run-test run-server run-client run-client-custom test-tcp stress-test logs-summary logs-tail debug check info help

# N√£o remove objetos intermedi√°rios automaticamente
.SECONDARY: $(LIBTSLOG_OBJ) $(TEST_LIBTSLOG_OBJ) $(TCP_SERVER_OBJ) $(TCP_CLIENT_OBJ)